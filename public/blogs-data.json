[
  {
    "question": "What is useState and how does it work in React?",
    "answer": "useState is a built-in React Hook that allows functional components to hold and manage local state. It takes an initial value as an argument and returns an array with two elements: the current state value and a setter function to update that state. When you call the setter function with a new value, React triggers a re-render of the component to reflect the updated state in the UI. useState is commonly used for handling interactive elements such as form inputs, toggles, counters, and dynamic content updates. Since functional components don’t have the 'this.state' or 'this.setState' used in class components, useState is essential for enabling reactivity in modern React development. Each call to useState is isolated, so multiple pieces of state can be managed by calling it multiple times. It’s simple yet powerful, helping you build interactive and dynamic interfaces without needing class components."
  },
  {
    "question": "What is the purpose of useEffect in React?",
    "answer": "useEffect is a React Hook used to perform side effects in function components. Side effects include things like data fetching, setting up subscriptions, manually manipulating the DOM, and timers. useEffect runs after the component renders, and it can re-run based on a list of dependencies passed to it. This ensures that the effect is synchronized with specific state or prop changes. If no dependencies are provided, it runs after every render. If an empty array is passed, it behaves like componentDidMount, running only once. It can also return a cleanup function to clear timers, unsubscribe from listeners, or clean up other resources when the component unmounts or before re-running the effect. This makes useEffect a powerful tool for managing lifecycle-like behavior in functional components, replacing lifecycle methods used in class-based components such as componentDidMount, componentDidUpdate, and componentWillUnmount."
  },
  {
    "question": "What is a custom hook in React and when should you use one?",
    "answer": "A custom hook is a JavaScript function that starts with the word 'use' and can use other hooks internally, like useState or useEffect. It allows you to encapsulate and reuse logic across multiple components without duplicating code. Custom hooks are used when you find yourself writing the same hook logic in several components—such as form handling, API calls, or input validation. By abstracting this into a custom hook, your component code stays cleaner, more modular, and easier to maintain. They help promote DRY (Don't Repeat Yourself) principles in React apps. Custom hooks do not add any new capabilities to React but make it easier to share logic in a reusable way. You should use a custom hook whenever a piece of logic is used in multiple places or when you want to keep components focused solely on rendering and UI behavior while handling business logic separately."
  },
  {
    "question": "Difference between controlled and uncontrolled components. Which one is better?",
    "answer": "Controlled components are form inputs whose values are managed by React state. Every change is handled by an onChange event, updating the component’s state and re-rendering the input. In contrast, uncontrolled components store their own internal state, and you access values using refs, not through React. Controlled components are more predictable and make it easier to validate, reset, and manipulate input values dynamically. They also allow better integration with other React features like state and effects. Uncontrolled components are quicker to set up for simple use cases but can become harder to manage in larger forms. Controlled components are generally considered the better approach in modern React apps because they offer better control, consistency, and debugging support, especially in complex forms. However, in performance-sensitive scenarios or when integrating non-React libraries, uncontrolled components might be useful."
  },
  {
    "question": "Tell us something about useFormStatus() in React.",
    "answer": "useFormStatus() is a React Hook introduced in newer versions (such as with React Server Components and actions). It helps you track the status of a form during its lifecycle, specifically for asynchronous submissions. It can be used inside a form context to determine whether a form is currently submitting (pending), has succeeded, or failed. This is useful for conditionally disabling buttons during submission, showing loading indicators, or preventing duplicate submissions. It simplifies the management of form feedback and state without needing to manually track it through useState or useEffect. Typically, useFormStatus is used in frameworks like Next.js with server actions, making form UX smoother and more responsive in concurrent UI. It integrates well with modern React paradigms focused on server-driven actions and client/server hybrid behaviors."
  }
]
